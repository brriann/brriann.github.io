{"version":3,"sources":["components/child/Link.js","components/child/Button.js","components/parent/FlexRowButton.js","App.js","serviceWorker.js","index.js"],"names":["Link","className","href","this","props","target","rel","text","Component","Button","FlexRowButton","children","map","child","i","baseUrl","builtLinks","link","builtRepos","repo","builtWorkRepos","workRepo","builtInfraRepos","infraRepo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAgBeA,G,2LAXP,OACI,uBAAGC,UAAU,SACTC,KAAMC,KAAKC,MAAMF,KACjBG,OAAO,SACPC,IAAI,uBACHH,KAAKC,MAAMG,U,GAPTC,cCgBJC,E,iLAXP,OACI,yBAAKR,UAAWE,KAAKC,MAAMH,WACvB,kBAAC,EAAD,CACIC,KAAMC,KAAKC,MAAMF,KACjBK,KAAMJ,KAAKC,MAAMG,Y,GANhBC,aCkBNE,E,iLAhBP,OACI,yBAAKT,UAAU,aAEPE,KAAKC,MAAMO,SAASC,KAAI,SAACC,EAAOC,GAAR,OACpB,kBAAC,EAAD,CACIb,UATJ,kBAUIM,KAAMM,EAAMN,KACZL,KAAMW,EAAMX,e,GATZM,aCKtBO,G,MAAU,+BAGVC,EANQ,CAAC,cAAe,YAAa,eAAgB,eAAgB,gBAMlDJ,KAAI,SAAAK,GAAI,MAAK,CAAEf,KAFtB,WAEwCe,EAAMV,KAAMU,MAChEC,EANQ,CAAC,UAAW,MAAO,WAAY,QAAS,OAAQ,qBAMrCN,KAAI,SAAAO,GAAI,MAAK,CAAEjB,KAAMa,EAAUI,EAAMZ,KAAMY,MAC9DC,EAVY,CAAC,SAAU,OAAQ,SAAU,SAAU,QAAS,SAUjCR,KAAI,SAAAS,GAAQ,MAAK,CAChDnB,KAAMa,EAAUM,EAAUd,KAAMc,MAE5BC,EAZa,CAAC,MAAO,QAAS,SAAU,aAAc,SAAU,UAAW,SAY9CV,KAAI,SAAAW,GAAS,MAAK,CACnDrB,KAAMa,EAAUQ,EAAWhB,KAAMgB,MAkDpBC,MA9Cf,WACE,OACE,yBAAKvB,UAAU,SACb,yBAAKA,UAAU,kBACf,4BAAQA,UAAU,eAChB,8DAGA,oGAGA,mDACA,2BACE,kBAAC,EAAD,CACEU,SAAUS,KAGd,2BACE,kBAAC,EAAD,CACET,SAAUW,KAGd,oDACA,2BACE,kBAAC,EAAD,CACEX,SAAUO,KAGd,qDACA,2BACA,kBAAC,EAAD,CACIP,SAAUK,KAGd,uEAGA,4FCjDYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3525321f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Link.css'; \n\nclass Link extends Component {\n    render() {\n        return (\n            <a className=\"ezLink\"\n                href={this.props.href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                {this.props.text}\n            </a>\n        );\n    }\n}\n\nexport default Link;\n","import React, { Component } from 'react';\nimport './Button.css'; \nimport './Link.css';\n\nimport Link from './Link.js';\n\nclass Button extends Component {\n    render() {\n        return (\n            <div className={this.props.className}>\n                <Link \n                    href={this.props.href}\n                    text={this.props.text}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport Button from '../child/Button.js';\nimport '../child/Button.css'; \n\nconst buttonClassName = 'ezButton btnMed';\n\nclass FlexRowButton extends Component {\n    render() {\n        return (\n            <div className=\"ezFlexRow\">\n                {\n                    this.props.children.map((child, i) => (\n                        <Button \n                            className={buttonClassName}\n                            text={child.text}\n                            href={child.href} \n                        />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default FlexRowButton;\n","import React from 'react';\nimport './App.css';\n\nimport FlexRowButton from './components/parent/FlexRowButton.js'\nimport './components/parent/FlexRowButton.css'\n\nconst workRepos = ['dotnet', 'tsql', 'nodejs', 'python', 'mongo', 'react'];\nconst infraRepos = ['aws', 'azure', 'apidev', 'automation', 'docker', 'windows', 'linux'];\nconst links = ['fantasy.ski', 'keydev.us', 'floatapp.net', 'bfostdev.com', 'bfostdev.net'];\nconst repos = ['algs-ds', 'cpp', 'comparch', 'langs', 'func', 'brriann.github.io'];\n\nconst baseUrl = 'https://github.com/brriann/'\nconst urlPrefix = 'https://'\n\nconst builtLinks = links.map(link => ({ href: urlPrefix + link, text: link }));\nconst builtRepos = repos.map(repo => ({ href: baseUrl + repo, text: repo }));\nconst builtWorkRepos = workRepos.map(workRepo => ({\n  href: baseUrl + workRepo, text: workRepo\n}));\nconst builtInfraRepos = infraRepos.map(infraRepo => ({\n  href: baseUrl + infraRepo, text: infraRepo\n}));\n\n\nfunction App() {\n  return (\n    <div className=\"ezApp\">\n      <div className=\"ezAppContainer\">\n      <header className=\"ezAppHeader\">\n        <p>\n          Welcome to brriann.github.io...\n        </p>\n        <p>\n          This is a collection of projects, coursework, and reference material.\n        </p>\n        <p>2020 full-time work:</p>\n        <p>\n          <FlexRowButton\n            children={builtWorkRepos}\n          />\n        </p>\n        <p>\n          <FlexRowButton\n            children={builtInfraRepos}\n          />\n        </p>\n        <p>View in a repository:</p>\n        <p>\n          <FlexRowButton\n            children={builtRepos}\n          />\n        </p>\n        <p>Or visit in a browser:</p>\n        <p>\n        <FlexRowButton\n            children={builtLinks}\n          />\n        </p>\n        <p>\n          brriann.github.io is a simple React app.\n        </p>\n        <p>\n          My goal is to make a React template that's easy to reuse.\n        </p>\n      </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}