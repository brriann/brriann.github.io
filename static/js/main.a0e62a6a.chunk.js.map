{"version":3,"sources":["components/child/Link.js","components/child/Button.js","components/parent/FlexRowButton.js","App.js","serviceWorker.js","index.js"],"names":["Link","className","href","this","props","target","rel","text","Component","Button","highlightClassName","highlight","FlexRowButton","children","map","child","i","repoBuilder","repo","name","builtWorkRepos","builtInfraRepos","builtLinks","link","builtClassRepos","builtProjRepos","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAgBeA,G,2LAXP,OACI,uBAAGC,UAAU,SACTC,KAAMC,KAAKC,MAAMF,KACjBG,OAAO,SACPC,IAAI,uBACHH,KAAKC,MAAMG,U,GAPTC,cCmBJC,E,iLAZP,IAAIC,EAAqBP,KAAKC,MAAMO,UAAY,YAAc,eAC9D,OACI,yBAAKV,UANO,mBAMsBS,GAC9B,kBAAC,EAAD,CACIR,KAAMC,KAAKC,MAAMF,KACjBK,KAAMJ,KAAKC,MAAMG,Y,GAPhBC,aCgBNI,E,iLAhBP,OACI,yBAAKX,UAAU,aAEPE,KAAKC,MAAMS,SAASC,KAAI,SAACC,EAAOC,GAAR,OACpB,kBAAC,EAAD,CACIT,KAAMQ,EAAMR,KACZL,KAAMa,EAAMb,KACZS,UAAWI,EAAMJ,oB,GATjBH,aC+CxBS,G,MAAc,SAAAC,GAAI,MAAK,CACzBhB,KAJc,8BAIEgB,EAAKC,KACrBZ,KAAMW,EAAKC,KACXR,UAAWO,EAAKP,aASZS,EA3DY,CAChB,CAAC,KAAQ,SAAU,WAAa,GAChC,CAAC,KAAQ,OAAQ,WAAa,GAC9B,CAAC,KAAQ,SAAU,WAAa,GAChC,CAAC,KAAQ,SAAU,WAAa,GAChC,CAAC,KAAQ,QAAS,WAAa,GAC/B,CAAC,KAAQ,QAAS,WAAa,IAqDAN,IAAIG,GAE/BI,EApDa,CACjB,CAAC,KAAQ,MAAO,WAAa,GAC7B,CAAC,KAAQ,QAAS,WAAa,GAC/B,CAAC,KAAQ,SAAU,WAAa,GAChC,CAAC,KAAQ,aAAc,WAAa,GACpC,CAAC,KAAQ,SAAU,WAAa,GAChC,CAAC,KAAQ,UAAW,WAAa,GACjC,CAAC,KAAQ,QAAS,WAAa,IA6CEP,IAAIG,GAEjCK,EA5CQ,CACZ,CAAC,KAAQ,cAAe,WAAa,GACrC,CAAC,KAAQ,YAAa,WAAa,GACnC,CAAC,KAAQ,eAAgB,WAAa,GACtC,CAAC,KAAQ,eAAgB,WAAa,GACtC,CAAC,KAAQ,eAAgB,WAAa,IAuCfR,KAVP,SAAAS,GAAI,MAAK,CACzBrB,KATgB,WASEqB,EAAKJ,KACvBZ,KAAMgB,EAAKJ,KACXR,UAAWY,EAAKZ,cASZa,EAtCa,CACjB,CAAC,KAAQ,UAAW,WAAa,GACjC,CAAC,KAAQ,MAAO,WAAa,GAC7B,CAAC,KAAQ,WAAY,WAAa,GAClC,CAAC,KAAQ,QAAS,WAAa,GAC/B,CAAC,KAAQ,OAAQ,WAAa,GAC9B,CAAC,KAAQ,KAAM,WAAa,IAgCKV,IAAIG,GAEjCQ,EA/BY,CAChB,CAAC,KAAQ,oBAAqB,WAAa,GAC3C,CAAC,KAAQ,YAAa,WAAa,GACnC,CAAC,KAAQ,cAAe,WAAa,GACrC,CAAC,KAAQ,cAAe,WAAa,GACrC,CAAC,KAAQ,gBAAiB,WAAa,IA0BRX,IAAIG,GA2CtBS,MAxCf,WACE,OACE,yBAAKzB,UAAU,SACb,yBAAKA,UAAU,kBACf,4BAAQA,UAAU,eAChB,iEACA,2BACE,kBAAC,EAAD,CACEY,SAAUO,KAGd,2BACE,kBAAC,EAAD,CACEP,SAAUQ,KAGd,qDACA,2BACE,kBAAC,EAAD,CACER,SAAUW,KAGd,iDACA,2BACE,kBAAC,EAAD,CACEX,SAAUY,KAGd,0DACA,2BACA,kBAAC,EAAD,CACIZ,SAAUS,SC/FFK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0e62a6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Link.css'; \n\nclass Link extends Component {\n    render() {\n        return (\n            <a className=\"ezLink\"\n                href={this.props.href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                {this.props.text}\n            </a>\n        );\n    }\n}\n\nexport default Link;\n","import React, { Component } from 'react';\nimport './Button.css'; \nimport './Link.css';\n\nimport Link from './Link.js';\n\nconst buttonClassName = 'ezButton btnMed ';\n\nclass Button extends Component {\n    render() {\n        let highlightClassName = this.props.highlight ? 'highlight' : 'no-highlight';\n        return (\n            <div className={buttonClassName + highlightClassName}>\n                <Link \n                    href={this.props.href}\n                    text={this.props.text}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport Button from '../child/Button.js';\nimport '../child/Button.css'; \n\n\n\nclass FlexRowButton extends Component {\n    render() {\n        return (\n            <div className=\"ezFlexRow\">\n                {\n                    this.props.children.map((child, i) => (\n                        <Button\n                            text={child.text}\n                            href={child.href}\n                            highlight={child.highlight}\n                        />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default FlexRowButton;\n","import React from 'react';\nimport './App.css';\n\nimport FlexRowButton from './components/parent/FlexRowButton.js'\nimport './components/parent/FlexRowButton.css'\n\nconst workRepos = [\n  {'name': 'dotnet', 'highlight': true},\n  {'name': 'tsql', 'highlight': true},\n  {'name': 'nodejs', 'highlight': true},\n  {'name': 'python', 'highlight': false},\n  {'name': 'mongo', 'highlight': false},\n  {'name': 'react', 'highlight': true}\n];\n\nconst infraRepos = [\n  {'name': 'aws', 'highlight': true},\n  {'name': 'azure', 'highlight': true},\n  {'name': 'apidev', 'highlight': true},\n  {'name': 'automation', 'highlight': false},\n  {'name': 'docker', 'highlight': true},\n  {'name': 'windows', 'highlight': true},\n  {'name': 'linux', 'highlight': true}\n];\n\nconst links = [\n  {'name': 'fantasy.ski', 'highlight': true},\n  {'name': 'keydev.us', 'highlight': false},\n  {'name': 'floatapp.net', 'highlight': false},\n  {'name': 'bfostdev.com', 'highlight': true},\n  {'name': 'bfostdev.net', 'highlight': true}\n];\n\nconst classRepos = [\n  {'name': 'algs-ds', 'highlight': true},\n  {'name': 'cpp', 'highlight': true},\n  {'name': 'comparch', 'highlight': true},\n  {'name': 'langs', 'highlight': false},\n  {'name': 'func', 'highlight': false},\n  {'name': 'os', 'highlight': false}\n];\n\nconst projRepos = [\n  {'name': 'brriann.github.io', 'highlight': true},\n  {'name': 'node-rest', 'highlight': false},\n  {'name': 'django-rest', 'highlight': false},\n  {'name': 'react-redux', 'highlight': true},\n  {'name': 'mongo-express', 'highlight': false}\n];\n\nconst baseUrl = 'https://github.com/brriann/'\nconst urlPrefix = 'https://'\n\nlet repoBuilder = repo => ({\n  href: baseUrl + repo.name, \n  text: repo.name, \n  highlight: repo.highlight\n});\n\nlet linkBuilder = link => ({\n  href: urlPrefix + link.name,\n  text: link.name,\n  highlight: link.highlight\n});\n\nconst builtWorkRepos = workRepos.map(repoBuilder);\n\nconst builtInfraRepos = infraRepos.map(repoBuilder);\n\nconst builtLinks = links.map(linkBuilder);\n\nconst builtClassRepos = classRepos.map(repoBuilder);\n\nconst builtProjRepos = projRepos.map(repoBuilder);\n\n\nfunction App() {\n  return (\n    <div className=\"ezApp\">\n      <div className=\"ezAppContainer\">\n      <header className=\"ezAppHeader\">\n        <p>2020 full-time reference material:</p>\n        <p>\n          <FlexRowButton\n            children={builtWorkRepos}\n          />\n        </p>\n        <p>\n          <FlexRowButton\n            children={builtInfraRepos}\n          />\n        </p>\n        <p>CS and math classwork:</p>\n        <p>\n          <FlexRowButton\n            children={builtClassRepos}\n          />\n        </p>\n        <p>Template projects:</p>\n        <p>\n          <FlexRowButton\n            children={builtProjRepos}\n          />\n        </p>\n        <p>Live domains and resources:</p>\n        <p>\n        <FlexRowButton\n            children={builtLinks}\n          />\n        </p>\n      </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}